---
description: 定义AI助手的核心行为准则、回应格式和代码展示规范的配置文件
globs: **/.cursor/rules/*.mdc
---

# Rust AI 开发规范

1. 项目目标与上下文  
   - 始终使用中文编写代码注释、文档与交互信息。  
   - 明确项目功能、技术栈与依赖库，AI 生成代码前需提取项目文档中的上下文信息（如需求文档、设计文档）。  
   - 使用 Rust 语言特性（所有权、借用、模式匹配等）实现高效与安全，优先利用编译时检查而非运行时断言。  
   - 若涉及多语言交互（如 FFI、WebAssembly），需明确跨语言边界的内存安全与错误处理策略。  
   - 代码需兼顾可维护性和可读性，遵循 Rust 社区最佳实践。

2. 风格与规范  
   - 代码格式强制遵循 `rustfmt` 标准，并在 CI/CD 中集成自动化检查。  
   - 所有代码需通过 `Clippy` 静态分析，禁止出现警告（明确豁免的例外需添加 `#[allow(...)]` 注释说明）。  
   - 宏（Macros）命名使用全大写蛇形命名法（`SCREAMING_SNAKE_CASE`）。  
   - 变量、函数、类型、模块命名需语义清晰，遵循 `snake_case`（函数/变量）或 `CamelCase`（类型/模块）约定。  
   - 外部依赖版本需在 `Cargo.toml` 中精确指定（如 `serde = "1.0.196"`），禁止使用通配符（`*`）。

3. 设计与架构  
   - 使用模块（`mod`）划分代码层级，模块职责单一且耦合度低。  
   - 优先通过特性（`trait`）和泛型（`generics`）实现抽象，避免重复逻辑。  
   - 数据结构和算法需标注时间与空间复杂度，并在关键路径提供性能评估依据。  
   - 禁止过度抽象（如无明确需求的工厂模式或复杂继承链）。

4. 安全性与可维护性  
   - 优先使用安全接口（Safe API）；`unsafe` 代码仅限以下场景：  
     - FFI 交互  
     - 内存布局优化（如 `#[repr(C)]`）  
     - 性能关键路径且无安全替代方案  
   - 每段 `unsafe` 代码必须附带 `// SAFETY:` 注释，解释其安全性保障。  
   - 使用 `cargo-audit` 定期扫描依赖漏洞，并在 CI 中集成安全检查。  
   - 与第三方库交互时，需确认其许可证类型（禁止引入 GPL 等 Copyleft 协议）、维护状态（GitHub Stars/Issue 响应时间）及安全记录。

5. 测试与文档  
   - 单元测试（Unit Tests）覆盖核心模块与公共 API，覆盖率不低于 80%（通过 `tarpaulin` 统计）。  
   - 集成测试（Integration Tests）覆盖跨模块协作流程，测试用例需包含正常、边界与错误场景。  
   - 文档注释（`///`）必须包含以下内容：  
     - 功能描述  
     - 参数与返回值说明  
     - `# Examples` 代码块（可执行示例）  
     - Panic 与 Error 触发条件  
   - 所有公共 API 需提供集成测试示例，文档与代码需同步更新。

6. 性能与优化  
   - 算法选型需标注时间复杂度（如 O(n log n)），优先选择已知最优解。  
   - 关键路径需通过 `criterion` 或 `benchmark` 进行基准测试，并记录性能基线。  
   - 禁止未经验证的优化（如未通过 `perf` 或 `flamegraph` 定位的热点优化）。  
   - 避免过早优化，仅在性能瓶颈明确后使用缓存、并发等策略。

7. 依赖管理  
   - 使用 `cargo-deny` 检查许可证冲突与重复依赖。  
   - `Cargo.lock` 必须提交至版本库，发布时通过 `--locked` 确保构建一致性。  
   - 定期执行 `cargo update` 并验证兼容性，依赖更新需在 CHANGELOG 中记录。

8. 错误处理与日志  
   - 优先使用 `Result<T, E>` 处理可恢复错误，错误类型需实现 `std::error::Error` 与 `Debug`。  
   - `panic!` 仅用于不可恢复错误（如启动配置错误），并需通过 `tracing` 或 `log` 记录上下文。  
   - 敏感信息（如密钥、令牌）禁止输出到日志或控制台，需通过环境变量或加密配置（如 `dotenvy` + `sops`）管理。  
   - 日志级别按以下规范使用：  
     - `error`: 影响系统核心功能的错误  
     - `warn`: 潜在问题或降级操作  
     - `info`: 关键业务流程状态  
     - `debug`: 调试信息  
     - `trace`: 详细底层跟踪  

9. CI/CD 与自动化  
   - CI 流程必须包含以下步骤：  
     - `cargo fmt --check`  
     - `cargo clippy --all-targets -- -D warnings`  
     - `cargo test --all-features`  
     - `cargo audit`  
     - `tarpaulin --ignore-tests --out Html`（生成覆盖率报告）  
   - 所有 Pull Request 需通过自动化检查后方可合并。  
   - 发布构建需启用 `--release` 并剥离调试符号（`strip = true`）。

10. AI 交互与代码生成  
    - AI 生成代码需标记 `// GENERATED-BY-AI` 注释，并优先生成独立模块以便审查。  
    - 若需求不明确，AI 需主动请求上下文补充（如业务规则或性能指标）。  
    - 人工审查需重点关注以下内容：  
      - `unsafe` 代码的安全性证明  
      - 公共 API 的文档与测试完整性  
      - 敏感数据处理是否符合隐私规范  

11. 合规与开源  
    - 项目必须包含 `LICENSE` 文件，并在 `NOTICE` 中声明所有第三方依赖的许可证信息。  
    - 禁止引入 Copyleft 协议（如 GPL）的依赖，除非项目整体采用兼容协议。  
    - 硬编码敏感信息（如密码、IP）视为严重违规，需通过预提交钩子（pre-commit hooks）拦截。

12. 版本与兼容性  
    - 明确支持的最低 Rust 版本（如 `rust-version = "1.70"`），升级需通过全量测试。  
    - 异步运行时统一选用单一框架（如 Tokio 或 async-std），禁止混用导致兼容性问题。  

13. 审查与迭代  
    - 每季度复审规则文件，确保与 Rust 社区最新实践同步。  
    - 所有合并请求需至少经过一名核心维护者审查，重点检查：  
      - 是否存在无理由的 `unwrap()`/`expect()`  
      - 是否所有错误分支均有处理逻辑  
      - 是否所有依赖均符合许可证要求  

---

附：代码示例  
```rust
// 错误类型定义（符合 thiserror 和文档规范）
#[derive(Debug, thiserror::Error)]
pub enum AppError {
    #[error("Invalid configuration: {0}")]
    ConfigError(String),
    #[error("I/O error: {0}")]
    IoError(#[from] std::io::Error),
}

// 带安全注释的 unsafe 代码块
let ptr: *mut u8 = ...;
// SAFETY: 指针来自已初始化的内存区域，且生命周期由结构体所有权保证
unsafe { *ptr = 42; }

// 文档测试示例
/// 计算两个数的和
/// # Examples
/// ```
/// assert_eq!(add(2, 3), 5);
/// ```
pub fn add(a: i32, b: i32) -> i32 {
    a + b
}
